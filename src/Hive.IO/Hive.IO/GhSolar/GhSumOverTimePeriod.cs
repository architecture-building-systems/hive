using System;
using System.Collections.Generic;
using Grasshopper.Kernel;
using System.Linq;

namespace Hive.IO.GhSolar
{
    public class GhSumOverTimePeriod : GH_Component
    {
        //Summarize electricity yield over specified time period
        //- daily
        //- monthly
        //- year

        public GhSumOverTimePeriod() :
            base("Summarize PV electricity yield", "SumPvYield",
                "Summarizes the PV electricity yield per specified time period, e.g. monthly, daily, or entire year.",
                "[hive]", "Solar")
        {
        }

        public override GH_Exposure Exposure => GH_Exposure.secondary;

        protected override void RegisterInputParams(GH_InputParamManager pManager)
        {
            pManager.AddNumberParameter("sum_mode", "sum_mode", "Summary mode. Options: 'day', 'month', 'year'", GH_ParamAccess.item);
            pManager.AddNumberParameter("elec", "elec", "Electricity generated by PV panel. Time series with 8760 entries, in [kWh]", GH_ParamAccess.list);
        }

        protected override void RegisterOutputParams(GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("yield", "yield", "Yield per specified time period", GH_ParamAccess.list);
        }

        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string sum_mode = "";
            if (!DA.GetData(0, ref sum_mode)) return;
            List<double> elec = new List<double>();
            if (!DA.GetDataList(1, elec)) return;

            var pvyield = new List<double>();

            if (sum_mode == "day")
            {
                pvyield = daily_sum(elec);
            }
            else if (sum_mode == "month")
            {
                pvyield = monthly_sum(elec);
            }
            else if (sum_mode == "year")
            {
                pvyield = new List<double>() { elec.Sum() }; 
            }
            
            DA.SetData(0, pvyield); 
        }

        public List<double> daily_sum(List<double> elec)
        {
            var elecperday = new List<double>(new double[365]);
            var u = 0;

            foreach (var i in Enumerable.Range(0, elec.Count))
            {
                elecperday[u] += elec[i];
                if ((i + 1) % 24 == 0)
                {
                    u += 1;
                }
            }
            return elecperday;
        }

        public List<double> monthly_sum(List<double> elec)
        {
            // which year should be assumed for days per month?!
            // let's assume common year in Gregorian calendar
            var elecpermonth = new List<double>(new double[12]);
            var dayspermonth = new List<int> {31,28,31,30,31,30,31,31,30,31,30,31};
            var h = 0;

            foreach (var i in Enumerable.Range(0, 12))
            {
                elecpermonth[i] = elec.Skip(h).Take(h + (dayspermonth[i] * 24)).Sum(); // this is the closest equivalent to Python slicing [h:h+(dayspermonth[i]*24)] as of C# 7.3 that I could find
                h += dayspermonth[i] * 24;
            }
            return elecpermonth;
        }

        protected override System.Drawing.Bitmap Icon => Properties.Resources.Solar_SumTimeSeries;

        public override Guid ComponentGuid => new Guid("9d0764bf-ebc8-4d61-92a7-8c6e7297def9");
    }
}
