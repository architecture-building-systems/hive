using System;
using System.Collections.Generic;
using Grasshopper.Kernel;
using System.Linq;

namespace Hive.IO.GhSolar
{
    public class GhSTTimeResolved : GH_Component
    {
        //Time resolved Solar Thermal Collector

        //Eq. (A.11) from 10.1016/j.apenergy.2019.03.177
        //found in: 10.1016/j.apenergy.2016.07.055

        public GhSTTimeResolved() :
            base("Solar Thermal time resolved Energy System C#", "SolarThermalTimeResolved",
                "Calculates the time resolved heating energy generation from a solar thermal collector in [kWh]. Also outputs its time resolved efficiency.",
                "[hive]", "Solar C#")
        {
        }

        public override GH_Exposure Exposure => GH_Exposure.secondary;

        protected override void RegisterInputParams(GH_InputParamManager pManager)
        {
            pManager.AddNumberParameter("T_in", "T_in", "Inlet temperature into the Solar Thermal Collector [°C], time series.", GH_ParamAccess.list);
            pManager.AddNumberParameter("T_amb", "T_amb", "Ambient air temperature at the collector [°C], time series.", GH_ParamAccess.list);
            pManager.AddNumberParameter("OpticEff", "OpticEff", "Optical efficiency [-]", GH_ParamAccess.item);
            pManager.AddNumberParameter("HeatLoss", "HeatLoss", "Heat loss coefficient [W/m2K]", GH_ParamAccess.item);
            pManager.AddNumberParameter("Irrad", "Irrad", "Irradiance on collector [W/m2], time series", GH_ParamAccess.list);
            pManager.AddNumberParameter("Area", "Area", "Surface area of the collector [m2]", GH_ParamAccess.item);
        }

        protected override void RegisterOutputParams(GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("Heating", "heating", "Thermal energy generated by solar collector [kWh], time series", GH_ParamAccess.list);
            pManager.AddNumberParameter("eta", "eta", "Efficiency of the collector [-], time series", GH_ParamAccess.list);
        }

        protected override void SolveInstance(IGH_DataAccess DA)
        {
            //Calculate heating energy generated from a solar thermal collector
            //:param inlet_temp: Inlet temperature into the collector[°C], time series
            //:param ambient_temp: Ambient air temperature at the collector[°C], time series
            //:param FRtaualpha: Optical efficiency[-], constant
            //:param FRUL: Heat loss coefficient[W / m2K], constant
            //:param irradiance: Irradiance on the collector[W / m2], time series
            //:param surface_area: Surface area of the solar thermal collector[m2]
            //:returns: heating energy[kWh] time resolved, efficiency[-] time resolved

            List<double> T_in = new List<double>();
            if (!DA.GetDataList(0, T_in)) return;
            List<double> T_amb = new List<double>();
            if (!DA.GetDataList(1, T_amb)) return;
            double FRtaualpha = 0.0;
            if (!DA.GetData(0, ref FRtaualpha)) return;
            double FRUL = 0.0;
            if (!DA.GetData(0, ref FRUL)) return;
            List<double> irradiance = new List<double>();
            if (!DA.GetDataList(6, irradiance)) return;
            double A = 0.0;
            if (!DA.GetData(0, ref A)) return;

            var horizon = new[] { T_in.Count, T_amb.Count, irradiance.Count }.Min();

            var eta = new double[horizon];
            var heating = new double[horizon];

            foreach (var i in Enumerable.Range(0, horizon))
            {
                if (irradiance[i] > 0.0)
                {
                    var eta_temp = FRtaualpha - FRUL * (T_in[i] - T_amb[i]) / irradiance[i];
                    eta[i] = Math.Max(0, eta_temp);
                }
                else
                {
                    eta[i] = 0.0;
                }
                heating[i] = irradiance[i] * eta[i] * A / 1000.0;
            }

            DA.SetData(0, heating);
            DA.SetData(1, eta);
        }

        protected override System.Drawing.Bitmap Icon => Properties.Resources.Solar_ST_TimeResult;

        //public override Guid ComponentGuid => new Guid("694bc052-0bc9-44ca-82a9-dfdf591665b4");
        public override Guid ComponentGuid => Guid.NewGuid();
    }
}
