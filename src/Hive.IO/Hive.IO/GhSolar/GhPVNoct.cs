using System;
using System.Collections.Generic;
using Grasshopper.Kernel;
using System.Linq;

namespace Hive.IO.GhSolar
{
    public class GhPVNoct : GH_Component
    {
        //Calculating hourly electricity generation by PV system, given
        //- ambient temperature
        //- solar irradiance
        //- PV system parameters
        //- PV system area

        public GhPVNoct() :
            base("Photovoltaic time resolved Energy System", "PvTimeResolved",
                "Calculates time resolved electricity generation and cell efficiency of a photovoltaic panel based on the Nominal Operating Cell Temperature method, Eqt. A.10 in doi: 10.1016/j.apenergy.2019.03.177",
                "[hive]", "Solar")
        {
        }

        public override GH_Exposure Exposure => GH_Exposure.secondary;

        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddNumberParameter("A", "A", "Area of PV system in [m²].Default is 1.0", GH_ParamAccess.item, 1.0);
            pManager.AddNumberParameter("eta_PVref", "eta_PVref", "Reference PV efficiency under NOCT in [-]. Default is 0.15", GH_ParamAccess.item, 0.15);
            pManager.AddNumberParameter("beta", "beta", "Temperature coefficient [-]. Default is 0.004", GH_ParamAccess.item, 0.004);
            pManager.AddNumberParameter("NOCT", "NOCT", "Nominal operating cell temperature in [°C]. Default is 45.0", GH_ParamAccess.item, 45.0);
            pManager.AddNumberParameter("NOCT_ref", "NOCT_ref", "Reference temperature in [°C]. Default is 20.0", GH_ParamAccess.item, 20.0);
            pManager.AddNumberParameter("NOCT_sol", "NOCT_sol", "Reference irradiance in [W/m²]. Default is 800.0", GH_ParamAccess.item, 800.0);
            pManager.AddNumberParameter("T_amb", "T_amb", "Ambient temperature hourly time series, 8760 entries, in [°C]", GH_ParamAccess.list);
            pManager.AddNumberParameter("I", "I", "Solar irradiance on the panel. Time series with 8760 entries, in [W/m²]", GH_ParamAccess.list);
        }

        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("elec", "elec", "Electricity generated by PV panel. Time series with 8760 entries, in [Wh]", GH_ParamAccess.list);
            pManager.AddNumberParameter("effic", "effic", "Temperature dependent efficiency of PV module. Time series with 8760 entries [-]", GH_ParamAccess.list);
        }

        protected override void SolveInstance(IGH_DataAccess DA)
        {
            double A = 0.0;
            if (!DA.GetData(0, ref A)) return;
            double eta_PVref = 0.0;
            if (!DA.GetData(1, ref eta_PVref)) return;
            double beta = 0.0;
            if (!DA.GetData(2, ref beta)) return;
            double NOCT = 0.0;
            if (!DA.GetData(3, ref NOCT)) return;
            double NOCT_ref = 0.0;
            if (!DA.GetData(4, ref NOCT_ref)) return;
            double NOCT_sol = 0.0;
            if (!DA.GetData(5, ref NOCT_sol)) return;
            List<double> T_amb = new List<double>();
            if (!DA.GetDataList(6, T_amb)) return;
            List<double> I = new List<double>();
            if (!DA.GetDataList(7, I)) return;


            var eta_pv = pv_efficiency(eta_PVref, beta, NOCT, NOCT_ref, NOCT_sol, T_amb, I);
            var pv_yield = new double[eta_pv.Count()];

            foreach (var i in Enumerable.Range(0, eta_pv.Count()))
            {
                pv_yield[i] = A * eta_pv[i] * I[i];
            }

            DA.SetDataList(0, pv_yield);
            DA.SetDataList(1, eta_pv);
        }

        public double[] pv_efficiency(double eta_PVref, double beta, double NOCT, double NOCT_ref, double NOCT_sol, List<double> T_amb, List<double> I)
        {
            var horizon = T_amb.Count;
            var eta_pv = new double[horizon];
            
            foreach (var t in Enumerable.Range(0, horizon))
            {
                var Tpv = T_amb[t] + (NOCT - NOCT_ref) / NOCT_sol * I[t];
                eta_pv[t] = eta_PVref * (1 - beta * (Tpv - 25));
            }

            return eta_pv;
        }

        protected override System.Drawing.Bitmap Icon => Properties.Resources.Solar_PV_TimeResult;

        public override Guid ComponentGuid => new Guid("342c928a-31d4-4092-b20f-462595b699ed");
    }
}
